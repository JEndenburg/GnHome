<HTML>
    <head>
        <%- include ../partials/head.ejs %>
        <script src="/src/elm/Main.js"></script>
        <script src="/src/elm/WidgetCanvas.js"></script>
        <script src="/src/nav.js" defer></script>
        <script src="/src/dark-mode-switch.js" defer></script>
    </head>
    <body>
        <script>
            const app = Elm.Main.init();

            function getStateData(uuid, widgetStates)
            {
                for(let state of widgetStates)
                {
                    if(state.uuid == uuid)
                    {
                        return {
                            position: state.position
                        };
                    }
                }
                
                return null;
            }

            async function getWidgetsForUser(userUUID)
            {
                let response = await fetch("/api/graphql?query={main{widgets{name version description size{width height}uuid}}}");
                let jsonObject = await response.json();
                let widgets = jsonObject.data.main.widgets;
                response = await fetch(`/api/graphql?query={getWidgetState(userUUID%3A \"${userUUID}\"){data{position{x y z}uuid}}}`);
                jsonObject = await response.json();

                let widgetStates = jsonObject.data.getWidgetState.data;
                let userWidgets = [];

                for(let widget of widgets)
                {
                    let stateData = getStateData(widget.uuid, widgetStates);
                    if(stateData != null)
                    {
                        userWidgets.push({
                            uuid: widget.uuid,
                            name: widget.name,
                            version: widget.version,
                            size: widget.size,
                            position: stateData.position,
                        });
                    }
                }
                canvasApp.ports.onGetWidgetsForUser.send(userWidgets);
            }

            async function getWidgetsWithActiveState(userUUID)
            {
                let response = await fetch("/api/graphql?query={main{widgets{name version description size{width height}uuid}}}");
                let jsonObject = await response.json();
                let widgets = jsonObject.data.main.widgets;
                response = await fetch(`/api/graphql?query={getWidgetState(userUUID%3A \"${userUUID}\"){data{position{x y z}uuid}}}`);
                jsonObject = await response.json();

                let widgetStates = jsonObject.data.getWidgetState.data;
                let widgetInfo = [];

                for(let widget of widgets)
                {
                    let stateData = getStateData(widget.uuid, widgetStates);
                    widgetInfo.push({
                        uuid: widget.uuid.toString(),
                        name: widget.name,
                        description: widget.description,
                        version: widget.version,
                        active: (stateData != null),
                    });
                }
                
                app.ports.onWidgetListJSONObtained.send(widgetInfo);
            }

            async function toggleWidgetState(userUUID, widgetUUID, newState)
            {
                if(newState == true)
                    enableWidgetForUser(userUUID, widgetUUID);
                else
                    disableWidgetForUser(userUUID, widgetUUID);

                await getWidgetsWithActiveState(userUUID);
                canvasApp.ports.refreshWidgetCanvas.send(null);
            }

            async function enableWidgetForUser(userUUID, widgetUUID)
            {
                const centerX = (document.body.offsetWidth / 2) + document.body.offsetLeft;
                const centerY = (document.body.offsetHeight / 2) + document.body.offsetTop;
                let response = await fetch("/api/graphql", {
                    method: "POST",
                    headers: { "content-type": "application/json" },
                    body: JSON.stringify({query : `mutation{setWidgetState(userUUID:\"${userUUID}\"widgetUUID:\"${widgetUUID}\"x:${centerX}y:${centerY}z:0){statusCode}}`}),
                });
            }

            async function disableWidgetForUser(userUUID, widgetUUID)
            {
                let response = await fetch("/api/graphql", {
                    method: "POST",
                    headers: { "content-type": "application/json" },
                    body: JSON.stringify({query : `mutation{deleteWidgetState(userUUID:\"${userUUID}\"widgetUUID:\"${widgetUUID}\"){statusCode}}`}),
                });
            }
            
        </script>
        <main><div id="widget-canvas"></div></main>
        <script src="/src/widget-canvas.js"></script>
        <script>
            const canvasApp = Elm.WidgetCanvas.init({ node: document.getElementById("widget-canvas") });
            const widgetCanvas = new WidgetCanvas(document.querySelector("main"), BigInt(13377331));

            canvasApp.ports.getWidgetsForUser.subscribe(async () => await getWidgetsForUser(BigInt(13377331)))
            app.ports.fetchWidgetList.subscribe(async () => await getWidgetsWithActiveState(BigInt(13377331)))
            app.ports.toggleWidgetState.subscribe(async (obj) => await toggleWidgetState(BigInt(13377331), BigInt(obj.uuid), obj.newState));
        </script>
    </body>
</HTML>