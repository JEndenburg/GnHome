<HTML>
    <head>
        <%- include ../partials/head.ejs %>
        <script src="/src/elm/Main.js"></script>
        <script src="/src/elm/WidgetCanvas.js"></script>
        <script src="/src/nav.js" defer></script>
    </head>
    <body>
        <script>
            const app = Elm.Main.init();

            function getStateData(uuid, widgetStates)
            {
                for(let state of widgetStates)
                {
                    if(state.uuid == uuid)
                    {
                        return {
                            position: state.position
                        };
                    }
                }
                
                return null;
            }

            function adjustPositionAccordingToCanvas(positionIn)
            {
                positionIn.x += widgetCanvas.x;
                positionIn.y += widgetCanvas.y;

                return positionIn;
            }

            async function getWidgetsForUser(userUUID)
            {
                let response = await fetch("/api/graphql?query={main{widgets{name version description size{width height}uuid}}}");
                let jsonObject = await response.json();
                let widgets = jsonObject.data.main.widgets;
                response = await fetch(`/api/graphql?query={getWidgetState(userUUID%3A \"${userUUID}\"){data{position{x y z}uuid}}}`);
                jsonObject = await response.json();

                let widgetStates = jsonObject.data.getWidgetState.data;
                let userWidgets = [];

                for(let widget of widgets)
                {
                    let stateData = getStateData(widget.uuid, widgetStates);
                    if(stateData != null)
                    {
                        userWidgets.push({
                            uuid: widget.uuid,
                            name: widget.name,
                            version: widget.version,
                            size: widget.size,
                            position: adjustPositionAccordingToCanvas(stateData.position),
                        });
                    }
                }
                canvasApp.ports.onGetWidgetsForUser.send(userWidgets);
            }

            async function getWidgetsWithActiveState(userUUID)
            {
                let response = await fetch("/api/graphql?query={main{widgets{name version description size{width height}uuid}}}");
                let jsonObject = await response.json();
                let widgets = jsonObject.data.main.widgets;
                response = await fetch(`/api/graphql?query={getWidgetState(userUUID%3A \"${userUUID}\"){data{position{x y z}uuid}}}`);
                jsonObject = await response.json();

                let widgetStates = jsonObject.data.getWidgetState.data;
                let widgetInfo = [];

                for(let widget of widgets)
                {
                    let stateData = getStateData(widget.uuid, widgetStates);
                    widgetInfo.push({
                        uuid: widget.uuid.toString(),
                        name: widget.name,
                        description: widget.description,
                        version: widget.version,
                        active: (stateData != null),
                    });
                }
                
                app.ports.onWidgetListJSONObtained.send(widgetInfo);
            }

            async function toggleWidgetState(userUUID, widgetUUID, newState)
            {
                if(newState == true)
                    enableWidgetForUser(userUUID, widgetUUID);
                else
                    disableWidgetForUser(userUUID, widgetUUID);

                await getWidgetsWithActiveState(userUUID);
                canvasApp.ports.refreshWidgetCanvas.send(null);
            }

            async function enableWidgetForUser(userUUID, widgetUUID)
            {
                const centerX = (document.body.offsetWidth / 2) + document.body.offsetLeft;
                const centerY = (document.body.offsetHeight / 2) + document.body.offsetTop;
                let response = await fetch("/api/graphql", {
                    method: "POST",
                    headers: { "content-type": "application/json" },
                    body: JSON.stringify({query : `mutation{setWidgetState(userUUID:\"${userUUID}\"widgetUUID:\"${widgetUUID}\"x:${centerX}y:${centerY}z:0){statusCode}}`}),
                });
            }

            async function disableWidgetForUser(userUUID, widgetUUID)
            {
                let response = await fetch("/api/graphql", {
                    method: "POST",
                    headers: { "content-type": "application/json" },
                    body: JSON.stringify({query : `mutation{deleteWidgetState(userUUID:\"${userUUID}\"widgetUUID:\"${widgetUUID}\"){statusCode}}`}),
                });
            }

            function executeSearch(searchQuery)
            {
                const regex = new RegExp(".*" + escape(searchQuery.toLowerCase()).replace(/[^\w\*]/g, "").replace(/\*/g, ".*") + ".*");
                const widgetRepo = document.getElementById("widget-repo");
            
                let element = widgetRepo.firstElementChild;
                while(element != null)
                {
                    if(element.id == "")
                        element = element.nextElementSibling;
                    else
                    {
                        const name = element.querySelector(".name").innerText;
                        
                        element.style.display = (regex.test(escape(name.toLowerCase()))) ? "" : "none";

                        element = element.nextElementSibling;
                    }
                }
            }

            function getUserSettings()
            {
                let settings = {
                    theme : Number((localStorage.getItem("theme") || 0))
                };

                return settings;
            }

            function updateUserSettings(settings)
            {
                localStorage.setItem("theme", settings.theme);
                applyUserSettings(settings);
            }
            
            function applyUserSettings(settings)
            {
                document.getElementById("color-style").setAttribute("href", "/style/colors/" + getThemeFromId(settings.theme) );
            }

            function getThemeFromId(id)
            {
                switch(id)
                {
                    default:
                    case 0: return "light.css";
                    case 1: return "dark.css";
                    case 2: return "pink.css";
                    case 3: return "no-blue.css";
                }
            }

            function login()
            {
                const username = document.getElementById("username").querySelector("input").value;
                document.cookie = `username=${username}`;
                app.ports.receiveSessionData.send(username);
            }

            function getSessionData()
            {
                const cookies = document.cookie.split(';');
                for(let cookie of cookies)
                {
                    const cookieKVPair = cookie.trim().split('=');
                    if(cookieKVPair[0] == "username")
                    {
                        app.ports.receiveSessionData.send(cookieKVPair[1]);
                        return;
                    }
                }
                app.ports.receiveSessionData.send(null);
            }

            function deleteSessionData()
            {
                document.cookie = "username=LOGOUT; expires=Thu, 14 Jul 1994 07:30:00 UTC; path=/;"
                app.ports.receiveSessionData.send(null);
            }
            
        </script>
        <main><div id="widget-canvas"></div></main>
        <script src="/src/widget-canvas.js"></script>
        <script>
            const canvasApp = Elm.WidgetCanvas.init({ node: document.getElementById("widget-canvas") });
            const widgetCanvas = new WidgetCanvas(document.querySelector("main"), BigInt(13377331));

            canvasApp.ports.getWidgetsForUser.subscribe(async () => await getWidgetsForUser(BigInt(13377331)));
            canvasApp.ports.centerView.subscribe(() => widgetCanvas.resetPosition());
            app.ports.fetchWidgetList.subscribe(async () => await getWidgetsWithActiveState(BigInt(13377331)));
            app.ports.toggleWidgetState.subscribe(async (obj) => await toggleWidgetState(BigInt(13377331), BigInt(obj.uuid), obj.newState));
            app.ports.executeSearch.subscribe((query) => executeSearch(query));
            app.ports.getSettings.subscribe(() => app.ports.receiveSettings.send(getUserSettings()));
            app.ports.updateSettings.subscribe((settings) => updateUserSettings(settings));
            app.ports.login.subscribe(() => login());
            app.ports.requestSessionData.subscribe(() => getSessionData());
            app.ports.deleteSessionData.subscribe(() => deleteSessionData());

            applyUserSettings(getUserSettings());
        </script>
    </body>
</HTML>